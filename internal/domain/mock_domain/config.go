// Code generated by MockGen. DO NOT EDIT.
// Source: ../config.go
//
// Generated by this command:
//
//	mockgen -source=../config.go -destination=./config.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	entity "github.com/canpok1/ai-feed/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigRepository is a mock of ConfigRepository interface.
type MockConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRepositoryMockRecorder
	isgomock struct{}
}

// MockConfigRepositoryMockRecorder is the mock recorder for MockConfigRepository.
type MockConfigRepositoryMockRecorder struct {
	mock *MockConfigRepository
}

// NewMockConfigRepository creates a new mock instance.
func NewMockConfigRepository(ctrl *gomock.Controller) *MockConfigRepository {
	mock := &MockConfigRepository{ctrl: ctrl}
	mock.recorder = &MockConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigRepository) EXPECT() *MockConfigRepositoryMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockConfigRepository) Load() (*entity.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*entity.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockConfigRepositoryMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigRepository)(nil).Load))
}

// Save mocks base method.
func (m *MockConfigRepository) Save(config *entity.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockConfigRepositoryMockRecorder) Save(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfigRepository)(nil).Save), config)
}
