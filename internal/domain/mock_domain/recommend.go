// Code generated by MockGen. DO NOT EDIT.
// Source: ../recommend.go
//
// Generated by this command:
//
//	mockgen -source=../recommend.go -destination=./recommend.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	entity "github.com/canpok1/ai-feed/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRecommender is a mock of Recommender interface.
type MockRecommender struct {
	ctrl     *gomock.Controller
	recorder *MockRecommenderMockRecorder
	isgomock struct{}
}

// MockRecommenderMockRecorder is the mock recorder for MockRecommender.
type MockRecommenderMockRecorder struct {
	mock *MockRecommender
}

// NewMockRecommender creates a new mock instance.
func NewMockRecommender(ctrl *gomock.Controller) *MockRecommender {
	mock := &MockRecommender{ctrl: ctrl}
	mock.recorder = &MockRecommenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecommender) EXPECT() *MockRecommenderMockRecorder {
	return m.recorder
}

// Recommend mocks base method.
func (m *MockRecommender) Recommend(arg0 context.Context, arg1 *entity.AIConfig, arg2 *entity.PromptConfig, arg3 []entity.Article) (*entity.Recommend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recommend", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.Recommend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recommend indicates an expected call of Recommend.
func (mr *MockRecommenderMockRecorder) Recommend(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recommend", reflect.TypeOf((*MockRecommender)(nil).Recommend), arg0, arg1, arg2, arg3)
}
