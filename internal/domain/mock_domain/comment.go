// Code generated by MockGen. DO NOT EDIT.
// Source: ../comment.go
//
// Generated by this command:
//
//	mockgen -source=../comment.go -destination=./comment.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	domain "github.com/canpok1/ai-feed/internal/domain"
	entity "github.com/canpok1/ai-feed/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCommentGenerator is a mock of CommentGenerator interface.
type MockCommentGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCommentGeneratorMockRecorder
	isgomock struct{}
}

// MockCommentGeneratorMockRecorder is the mock recorder for MockCommentGenerator.
type MockCommentGeneratorMockRecorder struct {
	mock *MockCommentGenerator
}

// NewMockCommentGenerator creates a new mock instance.
func NewMockCommentGenerator(ctrl *gomock.Controller) *MockCommentGenerator {
	mock := &MockCommentGenerator{ctrl: ctrl}
	mock.recorder = &MockCommentGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentGenerator) EXPECT() *MockCommentGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockCommentGenerator) Generate(arg0 context.Context, arg1 *entity.Article) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockCommentGeneratorMockRecorder) Generate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockCommentGenerator)(nil).Generate), arg0, arg1)
}

// MockCommentGeneratorFactory is a mock of CommentGeneratorFactory interface.
type MockCommentGeneratorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCommentGeneratorFactoryMockRecorder
	isgomock struct{}
}

// MockCommentGeneratorFactoryMockRecorder is the mock recorder for MockCommentGeneratorFactory.
type MockCommentGeneratorFactoryMockRecorder struct {
	mock *MockCommentGeneratorFactory
}

// NewMockCommentGeneratorFactory creates a new mock instance.
func NewMockCommentGeneratorFactory(ctrl *gomock.Controller) *MockCommentGeneratorFactory {
	mock := &MockCommentGeneratorFactory{ctrl: ctrl}
	mock.recorder = &MockCommentGeneratorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentGeneratorFactory) EXPECT() *MockCommentGeneratorFactoryMockRecorder {
	return m.recorder
}

// MakeCommentGenerator mocks base method.
func (m *MockCommentGeneratorFactory) MakeCommentGenerator(arg0 *entity.AIConfig, arg1 *entity.PromptConfig) (domain.CommentGenerator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeCommentGenerator", arg0, arg1)
	ret0, _ := ret[0].(domain.CommentGenerator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeCommentGenerator indicates an expected call of MakeCommentGenerator.
func (mr *MockCommentGeneratorFactoryMockRecorder) MakeCommentGenerator(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeCommentGenerator", reflect.TypeOf((*MockCommentGeneratorFactory)(nil).MakeCommentGenerator), arg0, arg1)
}
