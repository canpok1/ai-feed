// Code generated by MockGen. DO NOT EDIT.
// Source: ../fetch.go
//
// Generated by this command:
//
//	mockgen -source=../fetch.go -destination=./fetch.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	entity "github.com/canpok1/ai-feed/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockFetchClient is a mock of FetchClient interface.
type MockFetchClient struct {
	ctrl     *gomock.Controller
	recorder *MockFetchClientMockRecorder
	isgomock struct{}
}

// MockFetchClientMockRecorder is the mock recorder for MockFetchClient.
type MockFetchClientMockRecorder struct {
	mock *MockFetchClient
}

// NewMockFetchClient creates a new mock instance.
func NewMockFetchClient(ctrl *gomock.Controller) *MockFetchClient {
	mock := &MockFetchClient{ctrl: ctrl}
	mock.recorder = &MockFetchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchClient) EXPECT() *MockFetchClientMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFetchClient) Fetch(url string) ([]entity.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", url)
	ret0, _ := ret[0].([]entity.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFetchClientMockRecorder) Fetch(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFetchClient)(nil).Fetch), url)
}
