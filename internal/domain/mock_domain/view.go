// Code generated by MockGen. DO NOT EDIT.
// Source: ../view.go
//
// Generated by this command:
//
//	mockgen -source=../view.go -destination=./view.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	entity "github.com/canpok1/ai-feed/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
	isgomock struct{}
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendArticles mocks base method.
func (m *MockMessageSender) SendArticles(arg0 []entity.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendArticles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendArticles indicates an expected call of SendArticles.
func (mr *MockMessageSenderMockRecorder) SendArticles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendArticles", reflect.TypeOf((*MockMessageSender)(nil).SendArticles), arg0)
}

// SendRecommend mocks base method.
func (m *MockMessageSender) SendRecommend(arg0 *entity.Recommend, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRecommend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRecommend indicates an expected call of SendRecommend.
func (mr *MockMessageSenderMockRecorder) SendRecommend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRecommend", reflect.TypeOf((*MockMessageSender)(nil).SendRecommend), arg0, arg1)
}
